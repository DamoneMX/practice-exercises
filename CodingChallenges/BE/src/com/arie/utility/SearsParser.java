package com.arie.utility;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import com.arie.objects.Catalog;
import com.arie.objects.Product;

/**
 * Parser which can extract products from Sears.com search page.
 * In the future, given more time it would be good to create an interface called Parser and this 
 * way enforce a rigid structures for Search Engine Parsers, this way making the code more extensible
 * but keeping it clean.
 * 
 * @author  Arie Radilla Laureano
 */
class SearsParser {
	
	/**
     * URL for Sears' website
     */
	private static final String SEARS_URL = "http://www.sears.com";
	
	/**
     * URL of the form that Sears.com uses to perform searches.
     */
	private static final String SEARS_FORM_URL = "http://www.sears.com/shc/s/search_10153_12605";
	
	/**
     * This method takes a redirect provided by sears.com's search engine and looks for a search url.
     * If a search url is found then it takes this new url and returns it to the crawler to replace the document 
     * in which the extraction of results will be performed.
     */
	public static String getQueryURL(Document doc){
		String redirectDoc = doc.toString();
		Pattern regEx = Pattern.compile("(var url = \".*\";)");
		Matcher matcher = regEx.matcher(redirectDoc);
		String match = "";
		
		while(matcher.find()) {
		    match = matcher.group(1);
		}

		match = match.replaceAll("var url = \"", "");
		match = match.replaceAll("\";", "");
		match = match.replace("\\", "");
		
		String returnURL = SEARS_URL + match;
		
		if(returnURL.equals("http://www.sears.com"))
			returnURL = null;

		return returnURL;
	}

	public static String getTotalResults(Document document){
		String result = "";

		Element totalDiv = document.getElementById("nmbProdItems");
		if(totalDiv != null) {
			String span = totalDiv.child(0).text();
			String[] total = span.split("of");
			result = total[total.length - 1];
		} 
	
		result = result.trim();
		if(result.equals(""))
			result = "0";
		return result;
	}
	
	/**
     * This method takes a document (website markup generated by the Jsoup library), 
     * and extracts product results using css selectors.
     */
	public static Catalog extractResults(Document document) {
		Catalog catalog = new Catalog();
		//All results are contained in a Card Container Div
		Elements cardContainers = document.getElementsByClass("cardContainer");
		
		if(cardContainers.size() > 0){
			for(Element card : cardContainers){
				Product product = new Product();
				
				//Title of product is written in a div with a cardProdTitle class
				Elements titleHolder = card.getElementsByClass("cardProdTitle");
				for(Element e : titleHolder){
					for(Element a : e.getElementsByTag("a")){
						product.setName(a.text());
					}	
				}
				
				//Obtain price from div, price that is stored is final discounted price if discounts apply
				Elements priceTags = card.getElementsByClass("gridPrice");	
				if(priceTags.size() > 0) {
					Element firstTag = priceTags.get(0);
					if(firstTag.children().size() > 0){
						String priceText = firstTag.child(0).text();
						priceText = priceText.replace("$", "");
						double price = Double.parseDouble(priceText); 
						product.setPrice(price);
					}
				}
				
				//If product is sold by third party vendor then extract this vendor
				//Otherwise set Sears.com as the vendor
				Element vendorHolder = card.getElementById("mrkplc");
				if(vendorHolder != null){
					Elements matches = vendorHolder.getElementsContainingText("Sold By");
					for(Element match : matches) {
						String vendorText = match.text();
						vendorText = vendorText.replace("Sold by ", "");
						product.setVendor(vendorText);
					} 
				} else {
					product.setVendor("Sears.com");
				}
				
				catalog.addProduct(product);
			}
		}
		return catalog;
	}
	
	public static String getSearchURL(){
		return SEARS_FORM_URL;
	}

	
}


